name: 🚀 PR Preview (GitHub-Hosted)

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main, develop]

jobs:
  # Deploy preview using GitHub-hosted runners
  deploy-preview:
    name: 🌐 Deploy PR Preview
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    permissions:
      contents: write
      pages: write
      id-token: write
      pull-requests: write
      issues: write
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            client/package-lock.json
            server/package-lock.json

      - name: 🔧 Install Dependencies
        run: |
          npm ci
          cd client && npm ci && cd ..
          cd server && npm ci && cd ..

      - name: 🧪 Run Tests
        run: |
          cd client && npm test -- --watchAll=false --coverage=false && cd ..
          cd server && npm test && cd ..

      - name: 🏗️ Build Application
        run: |
          cd client && npm run build && cd ..

      # Option 1: Deploy to Vercel
      - name: 🚀 Deploy to Vercel
        if: vars.VERCEL_TOKEN != ''
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./client
          alias-domains: |
            pr-${{ github.event.number }}-${{ github.event.repository.name }}.vercel.app

      # Option 2: Deploy to Netlify
      - name: 🚀 Deploy to Netlify
        if: vars.NETLIFY_AUTH_TOKEN != ''
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './client/build'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - PR #${{ github.event.number }}"
          alias: pr-${{ github.event.number }}-${{ github.event.repository.name }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      # Option 3: Deploy to GitHub Pages (Default fallback)
      - name: 🚀 Deploy to GitHub Pages
        if: vars.VERCEL_TOKEN == '' && vars.NETLIFY_AUTH_TOKEN == '' && vars.AWS_S3_BUCKET == '' && vars.FIREBASE_PROJECT_ID == ''
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./client/build
          destination_dir: pr-${{ github.event.number }}

      # Option 4: Deploy to AWS S3 + CloudFront
      - name: 🚀 Deploy to AWS S3
        if: vars.AWS_S3_BUCKET != ''
        run: |
          # Install AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          
          # Deploy to S3
          aws s3 sync client/build s3://${{ vars.AWS_S3_BUCKET }}/pr-${{ github.event.number }}/ --delete
          
          # Invalidate CloudFront (optional)
          if [ "${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }}" != "" ]; then
            aws cloudfront create-invalidation --distribution-id ${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/pr-${{ github.event.number }}/*"
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION || 'us-east-1' }}

      # Option 5: Deploy to Firebase Hosting
      - name: 🚀 Deploy to Firebase
        if: vars.FIREBASE_PROJECT_ID != ''
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: '${{ vars.FIREBASE_PROJECT_ID }}'
          channelId: pr-${{ github.event.number }}

      - name: 🔗 Get Preview URL
        id: preview-url
        run: |
          # Determine preview URL based on deployment method
          if [ "${{ vars.VERCEL_TOKEN }}" != "" ]; then
            PREVIEW_URL="https://pr-${{ github.event.number }}-${{ github.event.repository.name }}.vercel.app"
          elif [ "${{ vars.NETLIFY_AUTH_TOKEN }}" != "" ]; then
            PREVIEW_URL="https://pr-${{ github.event.number }}-${{ github.event.repository.name }}--${{ vars.NETLIFY_SITE_NAME }}.netlify.app"
          elif [ "${{ vars.VERCEL_TOKEN }}" == "" ] && [ "${{ vars.NETLIFY_AUTH_TOKEN }}" == "" ] && [ "${{ vars.AWS_S3_BUCKET }}" == "" ] && [ "${{ vars.FIREBASE_PROJECT_ID }}" == "" ]; then
            PREVIEW_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.number }}"
          elif [ "${{ vars.AWS_S3_BUCKET }}" != "" ]; then
            if [ "${{ vars.AWS_CLOUDFRONT_DOMAIN }}" != "" ]; then
              PREVIEW_URL="https://${{ vars.AWS_CLOUDFRONT_DOMAIN }}/pr-${{ github.event.number }}"
            else
              PREVIEW_URL="http://${{ vars.AWS_S3_BUCKET }}.s3-website-${{ vars.AWS_DEFAULT_REGION || 'us-east-1' }}.amazonaws.com/pr-${{ github.event.number }}"
            fi
          elif [ "${{ vars.FIREBASE_PROJECT_ID }}" != "" ]; then
            PREVIEW_URL="https://${{ vars.FIREBASE_PROJECT_ID }}--pr-${{ github.event.number }}.web.app"
          else
            PREVIEW_URL="No deployment service configured"
          fi
          
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: 💬 Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ steps.preview-url.outputs.preview_url }}';
            
            const comment = `## 🚀 Preview Deployment Ready!
            
            Your PR has been successfully deployed and is ready for testing:
            
            ### 🌐 Preview Link
            **Frontend**: [${previewUrl}](${previewUrl})
            
            ### 📊 Deployment Details
            - **PR Number**: #${{ github.event.number }}
            - **Branch**: \`${{ github.head_ref }}\`
            - **Commit**: \`${{ github.event.pull_request.head.sha }}\`
            - **Deployment**: GitHub-hosted runner
            
            ### 🧪 Test Your Changes
            You can now test the PR approval finder with your changes:
            1. Visit the preview URL above
            2. Enter a GitHub PR URL to test functionality
            3. Verify all features work as expected
            
            ### 📝 Notes
            - This preview will be automatically updated when you push new commits
            - The deployment will be cleaned up when the PR is closed
            - **Note**: This is a static frontend deployment. For full-stack testing with the API, use a self-hosted runner.
            
            ---
            *Deployed by GitHub Actions • [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})*`;
            
            // Find existing preview comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('🚀 Preview Deployment Ready!')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  # Cleanup when PR is closed
  cleanup-preview:
    name: 🧹 Cleanup Preview
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    permissions:
      contents: write
      pages: write
      pull-requests: write
      issues: write
    
    steps:
      - name: 🧹 Cleanup Vercel Deployment
        if: vars.VERCEL_TOKEN != ''
        run: |
          # Install Vercel CLI
          npm install -g vercel
          
          # List and delete deployment
          vercel list --scope=${{ secrets.VERCEL_ORG_ID }} --token=${{ secrets.VERCEL_TOKEN }} | grep "pr-${{ github.event.number }}" | awk '{print $1}' | xargs -I {} vercel remove {} --yes --scope=${{ secrets.VERCEL_ORG_ID }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🧹 Cleanup AWS S3 Deployment
        if: vars.AWS_S3_BUCKET != ''
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws s3 rm s3://${{ vars.AWS_S3_BUCKET }}/pr-${{ github.event.number }}/ --recursive
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION || 'us-east-1' }}

      - name: 💬 Comment Cleanup Complete
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🧹 Preview Deployment Cleaned Up
            
            The preview deployment for this PR has been automatically cleaned up since the PR was closed.
            
            - **Removed deployment**: Preview site deleted
            - **Freed resources**: Cloud resources cleaned up
            
            ---
            *Cleanup completed by GitHub Actions*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            }); 